@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&family=Lobster&family=Poppins:wght@400;500&family=Tsukimi+Rounded:wght@400;500&display=swap');

 /* rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2023, 7, 12);
    }
  }
}  */ 
  /*   <!-- 
   <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.10.0/firebase-firestore.js"></script> -->
<!--    
   <script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js"></script>

  <script type="module">
    // Import the functions you need from the SDKs you need
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
    import { getFirestore, collection, addDoc } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";
  
    // Your web app's Firebase configuration
    const firebaseConfig = {
        apiKey: "AIzaSyCKu8oeqHdYVB8GCF-DHRREz0ntiNgH25k",
      authDomain: "student-managment-webapp1.firebaseapp.com",
      projectId: "student-managment-webapp1",
      storageBucket: "student-managment-webapp1.appspot.com",
      messagingSenderId: "923621203026",
      appId: "1:923621203026:web:263f8988f92bb823a6d38b"
    };
  
    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
  
    // Get a Firestore instance
    const db = getFirestore(app);
  
   // Get add student button element from HTML
  const addButton = document.getElementById("addstudent");

// Handle button click event
addButton.addEventListener("click", () => {
  // Get input field values
  const nameInput = document.getElementById("name");
  const classInput = document.getElementById("class");
  const idInput = document.getElementById("id");

  
      // Create data object from input values
      const data = {
        name: nameInput.value,
        class: classInput.value,
        id: idInput.value
      };
  
      // Add data to Firestore collection
      addDataToFirestore(data);
    });
  
    // Function to add data to Firestore
    const addDataToFirestore = async (data) => {
      try {
        const collectionRef = collection(db, "User1"); // Replace "your-collection-name" with the actual name of your collection
  
        const docRef = await addDoc(collectionRef, data);
        console.log("Document written with ID: ", docRef.id);
        // Clear input fields after successful submission
      const nameInput = document.getElementById("name");
      const classInput = document.getElementById("class");
      const idInput = document.getElementById("id");

      nameInput.value = "";
      classInput.value = "";
      idInput.value = "";
       // Call the function to retrieve data and update the table
retrieveDataAndUpdateTable();
      } catch (error) {
        console.error("Error adding document: ", error);
      }
    };

// Function to retrieve data from Firestore and update table
const retrieveDataAndUpdateTable = async () => {
  const collectionRef = collection(db, "User1"); // Replace "your-collection-name" with the actual name of your collection

  const querySnapshot = await getDocs(collectionRef);

  const nameCell = document.getElementById("name1");
  const classCell = document.getElementById("class1");
  const idCell = document.getElementById("id1");

  // Clear previous content
  nameCell.textContent = "";
  classCell.textContent = "";
  idCell.textContent = "";

  querySnapshot.forEach((doc) => {
    const rowData = doc.data();

    // Update table cells with retrieved data
    nameCell.textContent = rowData.name;
    classCell.textContent = rowData.class;
    idCell.textContent = rowData.id;
  });
};

// Call the function to retrieve data and update the table
retrieveDataAndUpdateTable();


  </script> --> */
  

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'IBM Plex Sans', sans-serif;
font-family: 'Lobster', cursive;
font-family: 'Poppins', sans-serif;
font-family: 'Tsukimi Rounded', sans-serif;
}
body{
    width: 100vw;
    height: 100vh;
}

main.main{
    width: 100%;
    height: 100vh;
    overflow-x: auto;
    overflow-y: auto;
}

nav{
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 35px;
}

div.inputs{
    display: flex;
    flex-direction: row;
    width: 100vw;
    height: 19.5vh;
    
}
form{
    display: flex;
    flex-direction: row;
    gap: 40px;
justify-content: center;
align-items: center;
margin-top: 70px;
/* margin-right:65px ; */
margin-left: 10rem;
border-bottom: 2px solid #ccc ;

}

input.name,
input.class,
input.id{
     border: none;
    outline: none; 
    background-color:rgb(228, 228, 240) ;
    /* border: 1px solid rgb(116, 116, 121); */
    color: #141313;
    width: 15rem;
height: 40px;
font-size: 18px;
font-variant:normal;
border-radius: 10px;
cursor: text;
padding-left: 5px;
z-index: 1;
transition: border-color 0.1s, border-radius 0.1s, background-color 0.1s;
}
input.name::placeholder,
input.class::placeholder,
input.id::placeholder{
    color: #000000;
    font-size: 18px;
    font-weight: 400;
    padding: 10px;
}

input.name:focus,
input.class:focus,
input.id:focus,
input.name:hover,
input.class:hover,
input.id:hover {     /*  so that when user focus it the bordere should display */
  border: 3px solid #0004fc;
  border-radius: 5px;
  background-color: #ffffff;
  color: #000000;
}

 button#addstudent{
    width: 60px;
    height: 40px;
    background-color: #2b2dc2e8;
    border: none;
    outline: none;
    color: #ffffff;
    font-size: 16px;
    border-radius: 8px;
    margin-right: 30px;
    cursor: pointer;
    
}
button#addstudent:hover{
    transform: scale(1.1);
}


section.section{
    margin-left: 25%;
    border: 1px solid #dee2e6;
    width: 38rem;
    height: 20%;
}

table.resultinputs{
    width: 100%;
    border-bottom: 4px solid #dee2e6;
    height: 50px;
}
th.name,
th.class,
th.id,
th.actions{
    border-right: 1px solid #dee2e6;
    font-size:18px;
}



