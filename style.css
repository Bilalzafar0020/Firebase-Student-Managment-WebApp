@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&family=Lobster&family=Poppins:wght@400;500&family=Tsukimi+Rounded:wght@400;500&display=swap');

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'IBM Plex Sans', sans-serif;
font-family: 'Lobster', cursive;
font-family: 'Poppins', sans-serif;
font-family: 'Tsukimi Rounded', sans-serif;
}
body{
    max-width: 100vw;
    height: 100vh;
    overflow-y: scroll;  
}

/*  this is for dynmaicaly add scrollbar using javascript */
body.overflow-x-hidden {
  overflow-x: hidden;
}


body::-webkit-scrollbar {
  width: 13px;
  background: #2c2b2bc7;
  border-radius: 20px;
  
}
body::-webkit-scrollbar:hover{
  background: #c5c9d1;
}
/* Track */
body::-webkit-scrollbar-track {
  background-color: transparent;
}
 
/* Handle */
body::-webkit-scrollbar-thumb {
  background: #c5c9d1;
  border-radius: 20px;
}

/* Handle on hover */
body::-webkit-scrollbar-thumb:hover {
  background: #222020; 
}
body::-webkit-scrollbar-button{
  background: #2c2b2bc7;
  height: 9px;
  border-radius: 2px;
} 

main.main{
    width: 100%;
    height: 100%;
}

nav{
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 35px;
}
@media all and (max-width:430px) and (min-width:320px) {
  nav h2{
font-size: 18px;
  }
}
@media all and (max-width:350px) and (min-width:300px) {
  nav h2{
font-size: 16.5px;
  }
}

div.inputs{
    display: flex;
    flex-direction: row;
    width: 100vw;
    height: 19.5vh;
    
}
form{
    display: flex;
    flex-direction: row;
    gap: 40px;
justify-content: center;
align-items: center;
margin-top: 70px;
/* margin-right:65px ; */
margin-left: 10rem;
border-bottom: 2px solid #ccc ;

}
/* @media all and (max-width:) and (min-width;) {
  form{
    margin-left: ;
  }

} */

input.name,
input.class,
input.id{
     border: none;
    outline: none; 
    background-color:rgb(228, 228, 240) ;
    /* border: 1px solid rgb(116, 116, 121); */
    color: #141313;
    width: 15rem;
height: 40px;
font-size: 18px;
font-variant:normal;
border-radius: 10px;
cursor: text;
padding-left: 5px;
z-index: 1;
transition: border-color 0.1s, border-radius 0.1s, background-color 0.1s;
}
input.name::placeholder,
input.class::placeholder,
input.id::placeholder{
    color: #000000;
    font-size: 18px;
    font-weight: 400;
    padding: 10px;
}

input.name:focus,
input.class:focus,
input.id:focus,
input.name:hover,
input.class:hover,
input.id:hover {     /*  so that when user focus it the bordere should display */
  border: 3px solid #0004fc;
  border-radius: 5px;
  background-color: #ffffff;
  color: #000000;
}

 button#addstudent{
    width: 60px;
    height: 40px;
    background-color: #2b2dc2e8;
    border: none;
    outline: none;
    color: #ffffff;
    font-size: 16px;
    border-radius: 8px;
    margin-right: 30px;
    cursor: pointer;
    
}
button#addstudent:hover{
    transform: scale(1.1);
}


section.section{
    margin-left: 25%;
    /* border: 1px solid #dee2e6; */
    width: 38rem;
    height: 20%;
}

table.resultinputs{
    width: 100%;
    border:  1px solid #dee2e6; ;
    border-bottom: 4px solid #dee2e6;
    height: 50px;
}
th.name,
th.class,
th.id,
th.actions{
    border-right: 1px solid #dee2e6;
    font-size:18px;
}

th.name{
  width: 12rem !important;
}

th.class{
  width: 24.5rem !important;
}
th.id{
  width: 13rem !important;
}
th.Actions{
  width: 16.5rem !important;
}
/*  new css */

/* Styling for the table */
#result {
  border-collapse: collapse;
  width: 100%;
}

#result th,
#result td {
  padding: 8px;
  border-bottom: 2px solid #dee2e6;
  border-left: 1px solid #dee2e6;
  border-right: 1px solid #dee2e6;
  word-break: break-all;  /* most powerful */ 
}

/* Styling for the table heading */
#result th {
  font-weight: bold;
}

/* Styling for the action buttons */
/* #result button {
  margin-right: 4px;
} */

/* Hide horizontal overflow */
#result {
  overflow-y:auto ;
}


/*  // web app's Firebase configuration  
const firebaseConfig = {
    apiKey: "AIzaSyCKu8oeqHdYVB8GCF-DHRREz0ntiNgH25k",
    authDomain: "student-managment-webapp1.firebaseapp.com",
    projectId: "student-managment-webapp1",
    storageBucket: "student-managment-webapp1.appspot.com",
    messagingSenderId: "923621203026",
    appId: "1:923621203026:web:263f8988f92bb823a6d38b"
  };


// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

// Geting add student button element from HTML
const addButton = document.getElementById("addstudent");

// Handling button click event
addButton.addEventListener("click", async () => {
    // Geting input field values
    const nameInput = document.getElementById("name");
    const classInput = document.getElementById("class");
    const idInput = document.getElementById("id");

    // Creating data object from input values
    const data = {
        name: nameInput.value,
        class: classInput.value,
        id: idInput.value
    };

    try {
        // Adding data to Firestore collection
        await db.collection("User1").add(data);
        console.log("Document added successfully");

        // Clearing input fields after successful submission
        nameInput.value = "";
        classInput.value = "";
        idInput.value = "";
    } catch (error) {
        console.error("Error adding document: ", error);
    }
});

// Function to retrieve data from Firestore and update table
const retrieveDataAndUpdateTable = async () => {
    const querySnapshot = await db.collection("User1").get();
    const resultTable = document.getElementById("result");

    // Clearing previous content
    resultTable.innerHTML = "";

    querySnapshot.forEach((doc) => {
        const rowData = doc.data();

        // Create table row for each document
        const row = document.createElement("tr");

        // Create table cells
        const nameCell = document.createElement("td");
        nameCell.textContent = rowData.name;
        const classCell = document.createElement("td");
        classCell.textContent = rowData.class;
        const idCell = document.createElement("td");
        idCell.textContent = rowData.id;
        const actionsCell = document.createElement("td");
        const editButton = document.createElement("button");
        editButton.textContent = "Edit";
        const deleteButton = document.createElement("button");
        deleteButton.textContent = "Delete";
        actionsCell.appendChild(editButton);
        actionsCell.appendChild(deleteButton);
        // Append cells to row
        row.appendChild(nameCell);
        row.appendChild(classCell);
        row.appendChild(idCell);
        row.appendChild(actionsCell);

        // Append row to table
        resultTable.appendChild(row);
    });
};

// Call the function to retrieve data and update the table
retrieveDataAndUpdateTable();

// Subscribe to real-time updates
db.collection("User1").onSnapshot(() => {
    retrieveDataAndUpdateTable();
});

*/  
